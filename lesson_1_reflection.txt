versioning is cool

How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  diff -u fold.txt fnew.txt shows difference quickly

  it points the differences for you

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    help you quicly find introduced bugs
    make you confident while performing big changes (because you know you can rollback)

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
  automatic commit are dumb. they do not commit a finished state.
  you are supposed tio commit something meainngful + complete


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

  some consider files are independent
  some consider files are linked

How can you use the commands git log and git diff to view the history of files?
  git log --> view
  git diff c1 c2 --> diff between 2 commits

How might using version control make you more confident to make changes that could break something?
  I can revert my changes if they are wrong


 git log
 git log --stat
 git diff commitId commitId
 git diff			-- compares working dir to staging area
 git diff --staged		-- compares staging area to latest commit
 git show
 git --version
 git clone <URL>
 git clone <URL> <directory>
 git config --global color.ui auto
 git checkout commitId                    
 git checkout branch            -- working dir now contains branch
git checkout -b branch         -- create branch from current commit + working dir now contains branch
 git log --graph --online label1 label2

 git init 			-- creates a repo
 git status			-- shows the current branch , which files are under control, ...
 git add <file>			-- add file to the staging area
 git rm -cached < file>		-- remove a file from the staging area

 git branch			-- shows current and other branches
 git branch label		-- creates a new branch
 git branch -d label		-- deletes branch
 
 git merge label		-- merges label into current branch

 git remote			-- see all the current remotes
 git remote add <remName> url	-- add a remote named
 git remote -v
 
 git push origin master		-- push branch master to origin remote

 git pull origin master		-- pulls origin

$ git config --global credential.helper cache
# Set git to use the credential memory cache
$ git config --global credential.helper 'cache --timeout=3600'
# Set the cache to timeout after 1 hour (setting is in seconds)


